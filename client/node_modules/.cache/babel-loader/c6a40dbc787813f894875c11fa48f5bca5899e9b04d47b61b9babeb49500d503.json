{"ast":null,"code":"import { $authHost } from './index';\n\n// Интерфейс для ответа от сервера при добавлении заметки\n\n// Функция для добавления заметки\nexport const addNote = async (title, description, date, userId, x, y) => {\n  try {\n    const {\n      data\n    } = await $authHost.post('api/note', {\n      title,\n      description,\n      date,\n      userId,\n      x,\n      y\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Функция для получения всех заметок пользователя\nexport const getNotes = async userId => {\n  try {\n    const {\n      data\n    } = await $authHost.get(`api/note/${userId}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Функция для обновления заметки\nexport const updateNote = async (id, title, description, date, x, y) => {\n  try {\n    const {\n      data\n    } = await $authHost.put(`api/note/${id}`, {\n      title,\n      description,\n      date,\n      x,\n      y\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// Функция для удаления заметки\nexport const deleteNote = async id => {\n  try {\n    const {\n      data\n    } = await $authHost.delete(`api/note/${id}`);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["$authHost","addNote","title","description","date","userId","x","y","data","post","error","console","getNotes","get","updateNote","id","put","deleteNote","delete"],"sources":["C:/Users/Серебряков/Desktop/react-note-board/client/src/http/NoteAPI.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\r\nimport { $authHost } from './index';\r\n\r\n// Интерфейс для ответа от сервера при добавлении заметки\r\nexport interface AddNoteResponse {\r\n  // Поля, которые сервер может вернуть\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  userId: number;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n// Функция для добавления заметки\r\nexport const addNote = async (\r\n  title: string,\r\n  description: string,\r\n  date: string,\r\n  userId: number,\r\n  x: number,\r\n  y: number\r\n): Promise<AddNoteResponse> => {\r\n  try {\r\n    const { data }: AxiosResponse<AddNoteResponse> = await $authHost.post('api/note', {\r\n      title,\r\n      description,\r\n      date,\r\n      userId,\r\n      x,\r\n      y,\r\n    });\r\n    return data;\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функция для получения всех заметок пользователя\r\nexport const getNotes = async (userId: number): Promise<AddNoteResponse[]> => {\r\n  try {\r\n    const { data }: AxiosResponse<AddNoteResponse[]> = await $authHost.get(`api/note/${userId}`);\r\n    return data;\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функция для обновления заметки\r\nexport const updateNote = async (\r\n  id: number,\r\n  title: string,\r\n  description: string,\r\n  date: string,\r\n  x: number,\r\n  y: number\r\n): Promise<AddNoteResponse> => {\r\n  try {\r\n    const { data }: AxiosResponse<AddNoteResponse> = await $authHost.put(`api/note/${id}`, {\r\n      title,\r\n      description,\r\n      date,\r\n      x,\r\n      y,\r\n    });\r\n    return data;\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Функция для удаления заметки\r\nexport const deleteNote = async (id: number): Promise<{ message: string }> => {\r\n  try {\r\n    const { data }: AxiosResponse<{ message: string }> = await $authHost.delete(`api/note/${id}`);\r\n    return data;\r\n  } catch (error: any) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,SAAS;;AAEnC;;AAYA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CACrBC,KAAa,EACbC,WAAmB,EACnBC,IAAY,EACZC,MAAc,EACdC,CAAS,EACTC,CAAS,KACoB;EAC7B,IAAI;IACF,MAAM;MAAEC;IAAqC,CAAC,GAAG,MAAMR,SAAS,CAACS,IAAI,CAAC,UAAU,EAAE;MAChFP,KAAK;MACLC,WAAW;MACXC,IAAI;MACJC,MAAM;MACNC,CAAC;MACDC;IACF,CAAC,CAAC;IACF,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOP,MAAc,IAAiC;EAC5E,IAAI;IACF,MAAM;MAAEG;IAAuC,CAAC,GAAG,MAAMR,SAAS,CAACa,GAAG,CAAE,YAAWR,MAAO,EAAC,CAAC;IAC5F,OAAOG,IAAI;EACb,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAG,MAAAA,CACxBC,EAAU,EACVb,KAAa,EACbC,WAAmB,EACnBC,IAAY,EACZE,CAAS,EACTC,CAAS,KACoB;EAC7B,IAAI;IACF,MAAM;MAAEC;IAAqC,CAAC,GAAG,MAAMR,SAAS,CAACgB,GAAG,CAAE,YAAWD,EAAG,EAAC,EAAE;MACrFb,KAAK;MACLC,WAAW;MACXC,IAAI;MACJE,CAAC;MACDC;IACF,CAAC,CAAC;IACF,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAG,MAAOF,EAAU,IAAmC;EAC5E,IAAI;IACF,MAAM;MAAEP;IAAyC,CAAC,GAAG,MAAMR,SAAS,CAACkB,MAAM,CAAE,YAAWH,EAAG,EAAC,CAAC;IAC7F,OAAOP,IAAI;EACb,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}